# dbd_scraper_improved.py
# ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÄ‡∏û‡∏¥‡πà‡∏° debugging, retry logic, ‡πÅ‡∏•‡∏∞ screenshot ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

import pytesseract
from pdf2image import convert_from_path
from PIL import Image
import cv2
import numpy as np

import argparse
import re
import time
from pathlib import Path
from typing import Dict, Optional

import pandas as pd
from selenium import webdriver
from selenium.webdriver import ChromeOptions
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from webdriver_manager.chrome import ChromeDriverManager

pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'


# ------------------------- Selenium helpers ------------------------- #
def make_driver(download_dir: Path, headless: bool = False) -> webdriver.Chrome:
    opts = ChromeOptions()
    prefs = {
        "download.default_directory": str(download_dir.resolve()),
        "download.prompt_for_download": False,
        "download.directory_upgrade": True,
        "safebrowsing.enabled": True,
        "plugins.always_open_pdf_externally": True,
    }
    opts.add_experimental_option("prefs", prefs)
    
    opts.add_experimental_option("excludeSwitches", ["enable-logging"])
    opts.add_argument("--log-level=3")

    if headless:
        opts.add_argument("--headless=new")
        opts.add_argument("--window-size=1920,1080")
    else:
        opts.add_argument("--start-maximized")
    opts.add_argument("--disable-gpu")
    opts.add_argument("--disable-notifications")
    opts.add_argument("--no-sandbox")
    opts.add_argument("--disable-dev-shm-usage")
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=opts)
    return driver


def save_debug_screenshot(driver, name: str, out_dir: Path):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å screenshot ‡πÅ‡∏•‡∏∞ page source ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug"""
    try:
        ss_path = out_dir / f"debug_{name}_{int(time.time())}.png"
        driver.save_screenshot(str(ss_path))
        print(f"üíæ Screenshot saved: {ss_path}")
        
        html_path = out_dir / f"debug_{name}_{int(time.time())}.html"
        html_path.write_text(driver.page_source, encoding='utf-8')
        print(f"üíæ HTML saved: {html_path}")
    except Exception as e:
        print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å debug files: {e}")


def wait_click(driver, locator, timeout=20):
    el = WebDriverWait(driver, timeout).until(EC.element_to_be_clickable(locator))
    try:
        driver.execute_script("arguments[0].scrollIntoView({block:'center'});", el)
        time.sleep(0.3)
        el.click()
    except Exception:
        driver.execute_script("arguments[0].click();", el)
    return el


def wait_send_keys(driver, locator, text, timeout=20):
    el = WebDriverWait(driver, timeout).until(EC.visibility_of_element_located(locator))
    driver.execute_script("arguments[0].scrollIntoView({block:'center'});", el)
    el.clear()
    el.send_keys(text)
    return el


def try_close_popups(driver, verbose=False):
    """‡∏õ‡∏¥‡∏î‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏õ‡∏ó‡∏∏‡∏Å‡∏ä‡∏ô‡∏¥‡∏î"""
    candidates = [
        (By.XPATH, "//button[normalize-space()='‡∏õ‡∏¥‡∏î' or normalize-space()='Close']"),
        (By.XPATH, "//span[normalize-space()='‡∏õ‡∏¥‡∏î']/ancestor::button"),
        (By.XPATH, "//button[@aria-label='Close' or @aria-label='‡∏õ‡∏¥‡∏î']"),
        (By.XPATH, "//*[self::button or self::a][contains(.,'‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö') or contains(.,'‡∏ï‡∏Å‡∏•‡∏á') or contains(.,'‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö')]"),
        (By.XPATH, "//*[self::button or self::div][contains(@class,'close') or contains(@class,'modal-close')]"),
        (By.XPATH, "//div[contains(@class,'modal')]//button"),
        (By.XPATH, "//*[@role='dialog']//button"),
    ]
    closed_count = 0
    for by, xp in candidates:
        try:
            elems = driver.find_elements(by, xp)
            for e in elems:
                if e.is_displayed():
                    try:
                        driver.execute_script("arguments[0].click();", e)
                        closed_count += 1
                        time.sleep(0.3)
                    except:
                        pass
        except Exception:
            pass
    if verbose and closed_count > 0:
        print(f"‚úì ‡∏õ‡∏¥‡∏î‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏õ {closed_count} ‡∏≠‡∏±‡∏ô")


def wait_for_downloads(folder: Path, before_set: set, timeout=90) -> Path:
    end = time.time() + timeout
    while time.time() < end:
        after = set(folder.glob("*"))
        new = [p for p in after - before_set if p.exists() and not p.name.endswith(".crdownload")]
        new = [p for p in new if p.stat().st_size > 0]
        if new:
            return sorted(new, key=lambda p: p.stat().st_mtime)[-1]
        time.sleep(0.5)
    raise TimeoutError("‡∏£‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ")


# ------------------------- Scrape flow ------------------------- #
def search_by_juristic_id(driver, juristic_id: str, out_dir: Path):
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•"""
    print(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•: {juristic_id}")
    driver.get("https://datawarehouse.dbd.go.th/index")
    WebDriverWait(driver, 30).until(EC.presence_of_element_located((By.TAG_NAME, "body")))
    time.sleep(2.0)
    try_close_popups(driver, verbose=True)

    # ‡∏´‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    candidate_inputs = [
        (By.XPATH, "//input[@type='text' and (contains(@placeholder,'‡πÄ‡∏•‡∏Ç') or contains(@placeholder,'‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤') or contains(@placeholder,'010'))]"),
        (By.XPATH, "//input[contains(@class,'search') or contains(@name,'search')]"),
        (By.XPATH, "//div[contains(@class,'search')]//input"),
        (By.XPATH, "//input[@type='text']"),
    ]
    input_el = None
    for loc in candidate_inputs:
        try:
            input_el = WebDriverWait(driver, 8).until(EC.visibility_of_element_located(loc))
            print(f"‚úì ‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
            break
        except Exception:
            continue
    
    if input_el is None:
        save_debug_screenshot(driver, "search_input_not_found", out_dir)
        raise RuntimeError("‡∏´‡∏≤ input ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö screenshot ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå output")

    driver.execute_script("arguments[0].scrollIntoView({block:'center'});", input_el)
    input_el.clear()
    input_el.send_keys(juristic_id)
    time.sleep(0.5)

    # ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    search_button_found = False
    try:
        wait_click(driver, (By.XPATH, "//button[.//i[contains(@class,'search')] or contains(.,'‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤') or .//span[contains(@class,'icon')]]"), 10)
        search_button_found = True
    except Exception:
        try:
            input_el.send_keys(u"\ue007")
            search_button_found = True
        except:
            pass
    
    if not search_button_found:
        save_debug_screenshot(driver, "search_button_not_found", out_dir)
        raise RuntimeError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ")

    print("‚è≥ ‡∏£‡∏≠‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...")
    time.sleep(3.0)
    try_close_popups(driver, verbose=True)
    
    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤ profile ‡∏Ç‡∏∂‡πâ‡∏ô
    try:
        WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(.,'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•') or contains(.,'‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó')][not(self::script)]"))
        )
        print("‚úì ‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•")
    except Exception:
        save_debug_screenshot(driver, "company_page_not_found", out_dir)
        raise RuntimeError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏•‡∏Ç‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
    
    time.sleep(2.0)
    try_close_popups(driver, verbose=True)


def go_financial_tab(driver, out_dir: Path, max_retries=3):
    """‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô"""
    print("üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô...")
    
    for attempt in range(max_retries):
        try:
            try_close_popups(driver, verbose=True)
            time.sleep(1.0)
            
            # Scroll ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏•‡∏á‡∏°‡∏≤‡∏´‡∏ô‡πà‡∏≠‡∏¢ ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÅ‡∏ó‡πá‡∏ö‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á
            driver.execute_script("window.scrollTo(0, 300);")
            time.sleep(0.5)

            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏õ‡∏¥‡∏î dropdown "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô" ‡∏Å‡πà‡∏≠‡∏ô
            print("üîΩ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î dropdown...")
            dropdown_opened = False
            dropdown_candidates = [
                (By.XPATH, "//span[contains(.,'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô')]/parent::*"),
                (By.XPATH, "//*[@class='dropdown' and contains(.,'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô')]"),
                (By.XPATH, "//*[contains(@class,'dropdown') and contains(.,'‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô')]"),
                (By.XPATH, "//li[@class='dropdown' or contains(@class,'dropdown')]//span[contains(.,'‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô')]"),
            ]
            
            for loc in dropdown_candidates:
                try:
                    dropdown = driver.find_element(loc[0], loc[1])
                    if dropdown.is_displayed():
                        driver.execute_script("arguments[0].scrollIntoView({block:'center'});", dropdown)
                        time.sleep(0.3)
                        try:
                            dropdown.click()
                        except:
                            driver.execute_script("arguments[0].click();", dropdown)
                        print("‚úì ‡πÄ‡∏õ‡∏¥‡∏î dropdown ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                        dropdown_opened = True
                        time.sleep(1.0)
                        break
                except:
                    continue
            
            if not dropdown_opened:
                print("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö dropdown ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ó‡πá‡∏ö‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á...")
            
            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå "‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô" ‡πÉ‡∏ô dropdown menu
            candidates = [
                (By.XPATH, "//a[@href='#tab22' or @lang='tab22']"),  # ‡∏ï‡∏≤‡∏° HTML ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô
                (By.XPATH, "//a[contains(@class,'tabinfo') and contains(.,'‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô')]"),
                (By.XPATH, "//ul[@class='dropdown-menu']//a[contains(.,'‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô')]"),
                (By.XPATH, "//a[contains(normalize-space(),'‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô')]"),
                (By.XPATH, "//button[contains(normalize-space(),'‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô')]"),
                (By.XPATH, "//*[contains(@class,'tab') and contains(.,'‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô')]"),
                (By.XPATH, "//*[@role='tab' and contains(.,'‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô')]"),
                (By.XPATH, "//div[contains(.,'‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô') and contains(@class,'clickable')]"),
                (By.XPATH, "//*[contains(text(),'‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô')]"),
            ]
            
            tab = None
            for i, loc in enumerate(candidates):
                try:
                    elements = driver.find_elements(loc[0], loc[1])
                    for el in elements:
                        if el.is_displayed():
                            print(f"‚úì ‡∏û‡∏ö‡πÅ‡∏ó‡πá‡∏ö‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô (candidate #{i+1})")
                            driver.execute_script("arguments[0].scrollIntoView({block:'center'});", el)
                            time.sleep(0.5)
                            try:
                                el.click()
                            except:
                                driver.execute_script("arguments[0].click();", el)
                            tab = el
                            break
                    if tab:
                        break
                except Exception as e:
                    continue

            if tab is None:
                if attempt < max_retries - 1:
                    print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ó‡πá‡∏ö‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {attempt+1}/{max_retries}) ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...")
                    time.sleep(2.0)
                    continue
                else:
                    save_debug_screenshot(driver, "financial_tab_not_found", out_dir)
                    raise RuntimeError("‡∏´‡∏≤‡πÅ‡∏ó‡πá‡∏ö '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô' ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÅ‡∏°‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏≠‡∏á " + str(max_retries) + " ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")

            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÅ‡∏ó‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
            print("‚è≥ ‡∏£‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô...")
            time.sleep(5.0)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 2 ‡πÄ‡∏õ‡πá‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            
            # ‡∏•‡∏≠‡∏á scroll ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
            driver.execute_script("window.scrollTo(0, 500);")
            time.sleep(1.0)
            
            try_close_popups(driver, verbose=True)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß - ‡πÉ‡∏ä‡πâ XPath ‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏ß‡∏°‡∏Å‡∏ß‡πà‡∏≤
            content_found = False
            try:
                # ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢ pattern
                content_patterns = [
                    "//*[contains(.,'‡∏á‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ê‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô') or contains(.,'‡∏ê‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô')]",
                    "//*[contains(.,'‡∏á‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô') or contains(.,'‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô')]",
                    "//*[contains(.,'‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô') or contains(.,'‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô')]",
                    "//*[contains(.,'‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå')]",
                    "//*[contains(.,'‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô')]",
                    "//*[contains(.,'‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ')]",
                    "//table[contains(@class,'financial') or contains(@class,'report')]",
                    "//div[contains(@class,'financial-data') or contains(@class,'report-data')]",
                ]
                
                for pattern in content_patterns:
                    try:
                        elements = driver.find_elements(By.XPATH, pattern)
                        visible_elements = [el for el in elements if el.is_displayed() and el.text.strip()]
                        if visible_elements:
                            print(f"‚úì ‡∏û‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô: {pattern[:50]}...")
                            content_found = True
                            break
                    except:
                        continue
                
                if content_found:
                    print("‚úì ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    time.sleep(2.0)
                    return
                else:
                    raise Exception("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô")
                    
            except Exception as e:
                if attempt < max_retries - 1:
                    print(f"‚ö†Ô∏è  ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î ({e}) ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...")
                    # ‡∏•‡∏≠‡∏á refresh ‡∏´‡∏ô‡πâ‡∏≤
                    driver.refresh()
                    time.sleep(3.0)
                    continue
                else:
                    save_debug_screenshot(driver, "financial_content_not_loaded", out_dir)
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    page_text = driver.find_element(By.TAG_NAME, "body").text
                    print(f"üìÑ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å): {page_text[:100]}")
                    raise RuntimeError("‡πÅ‡∏ó‡πá‡∏ö‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î - ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
                    
        except Exception as e:
            if attempt < max_retries - 1:
                print(f"‚ö†Ô∏è  ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...")
                time.sleep(2.0)
            else:
                raise


def click_print_excel(driver, out_dir: Path):
    """‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå Excel"""
    try_close_popups(driver, verbose=True)

    # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà dropdown "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
    wait_click(driver, (By.XPATH, "//a[contains(.,'‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')]"), 20)
    time.sleep(0.5)

    # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏° Excel (‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏ß‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÄ‡∏õ‡πá‡∏ô <a id="finXLS">)
    try:
        wait_click(driver, (By.XPATH, "//a[@id='finXLS' or contains(.,'Excel')]"), 10)
    except Exception as e:
        save_debug_screenshot(driver, "excel_button_not_found", out_dir)
        raise RuntimeError(f"‡∏´‡∏≤ Excel download link ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠: {e}")

    time.sleep(1.0)
    
def download_company_info_pdf(driver, juristic_id: str, out_dir: Path) -> Path:
    """‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ó‡πá‡∏ö‡πÅ‡∏£‡∏Å - ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ Print to PDF"""
    print("üìÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•...")
    
    try:
        # ‡∏õ‡∏¥‡∏î‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏õ‡∏Å‡πà‡∏≠‡∏ô
        try_close_popups(driver, verbose=True)
        time.sleep(1.0)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÅ‡∏•‡πâ‡∏ß
        try:
            company_tab_candidates = [
                (By.XPATH, "//a[contains(.,'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•') or @href='#tab11']"),
                (By.XPATH, "//li[contains(@class,'active')]//a[contains(.,'‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•')]"),
            ]
            
            for loc in company_tab_candidates:
                try:
                    tab = driver.find_element(loc[0], loc[1])
                    if tab.is_displayed():
                        driver.execute_script("arguments[0].scrollIntoView({block:'center'});", tab)
                        time.sleep(0.3)
                        tab.click()
                        print("‚úì ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•")
                        time.sleep(2.0)
                        break
                except:
                    continue
        except Exception as e:
            print(f"‚ö†Ô∏è  ‡∏≠‡∏≤‡∏à‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: {e}")
        
        # Scroll ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        driver.execute_script("window.scrollTo(0, 200);")
        time.sleep(0.5)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å window handles ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        original_window = driver.current_window_handle
        original_windows = driver.window_handles
        
        # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏° "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" (‡∏ï‡∏£‡∏á‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô)
        print_button_candidates = [
            (By.XPATH, "//button[contains(.,'‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')]"),
            (By.XPATH, "//a[contains(.,'‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')]"),
            (By.XPATH, "//*[contains(@class,'print') and contains(.,'‡∏û‡∏¥‡∏°‡∏û‡πå')]"),
            (By.XPATH, "//button[.//i[contains(@class,'print')]]"),
            (By.CSS_SELECTOR, "button.btn-print"),
            (By.CSS_SELECTOR, "a.btn-print"),
        ]
        
        print_btn = None
        for loc in print_button_candidates:
            try:
                elements = driver.find_elements(loc[0], loc[1])
                for el in elements:
                    if el.is_displayed():
                        driver.execute_script("arguments[0].scrollIntoView({block:'center'});", el)
                        time.sleep(0.5)
                        print("‚úì ‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                        try:
                            el.click()
                        except:
                            driver.execute_script("arguments[0].click();", el)
                        print_btn = el
                        break
                if print_btn:
                    break
            except:
                continue
        
        if print_btn is None:
            save_debug_screenshot(driver, "print_button_not_found", out_dir)
            raise RuntimeError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'")
        
        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
        print("‚è≥ ‡∏£‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF...")
        time.sleep(3.0)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        new_windows = [w for w in driver.window_handles if w not in original_windows]
        
        if new_windows:
            # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà
            print("‚úì ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÅ‡∏ó‡πá‡∏ö‡∏ô‡∏±‡πâ‡∏ô...")
            driver.switch_to.window(new_windows[0])
            time.sleep(2.0)
            
            # ‡πÉ‡∏ä‡πâ Chrome DevTools Protocol ‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏õ‡πá‡∏ô PDF
            pdf_path = out_dir / f"{juristic_id}_company_info.pdf"
            
            try:
                result = driver.execute_cdp_cmd("Page.printToPDF", {
                    "landscape": False,
                    "printBackground": True,
                    "preferCSSPageSize": True,
                })
                
                import base64
                with open(pdf_path, 'wb') as f:
                    f.write(base64.b64decode(result['data']))
                
                print(f"‚úì ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å PDF ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {pdf_path.name}")
                
                # ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏ó‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°
                driver.close()
                driver.switch_to.window(original_window)
                
                return pdf_path
            except Exception as e:
                print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ printToPDF: {e}")
                driver.close()
                driver.switch_to.window(original_window)
                raise
        else:
            # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà ‡∏•‡∏≠‡∏á‡∏£‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
            print("‚è≥ ‡∏£‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥...")
            before = set(out_dir.glob("*"))
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠
            timeout = 60
            end_time = time.time() + timeout
            downloaded = None
            
            while time.time() < end_time:
                time.sleep(1.0)
                
                # ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ó‡∏µ‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà
                current_files = set(out_dir.glob("*.pdf"))
                new_pdfs = [f for f in current_files - before if f.exists()]
                
                # ‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏¢‡∏π‡πà
                complete_pdfs = [f for f in new_pdfs if not f.name.endswith('.crdownload')]
                
                if complete_pdfs:
                    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                    downloaded = sorted(complete_pdfs, key=lambda p: p.stat().st_mtime)[-1]
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î
                    if downloaded.stat().st_size > 1000:  # ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1KB
                        print(f"‚úì ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF: {downloaded.name} ({downloaded.stat().st_size} bytes)")
                        break
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
                remaining = int(end_time - time.time())
                if remaining % 10 == 0:
                    print(f"   ‡∏£‡∏≠‡πÑ‡∏ü‡∏•‡πå... (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")
            
            if downloaded is None:
                # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                print("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...")
                all_pdfs = list(out_dir.glob("*.pdf"))
                if all_pdfs:
                    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° modified time
                    latest_pdf = sorted(all_pdfs, key=lambda p: p.stat().st_mtime)[-1]
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if time.time() - latest_pdf.stat().st_mtime < 300:
                        downloaded = latest_pdf
                        print(f"‚úì ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {downloaded.name}")
            
            if downloaded is None:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ó‡∏µ‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î")
                # ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
                all_files = list(out_dir.glob("*"))
                print(f"üìÅ ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ({len(all_files)} ‡πÑ‡∏ü‡∏•‡πå):")
                for f in sorted(all_files, key=lambda p: p.stat().st_mtime, reverse=True)[:5]:
                    print(f"   - {f.name} ({f.stat().st_size} bytes)")
                raise TimeoutError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ó‡∏µ‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î")
            
            # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏™‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢
            new_name = out_dir / f"{juristic_id}_company_info.pdf"
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á
            if new_name.exists():
                print(f"‚ö†Ô∏è  ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö: {new_name.name}")
                new_name.unlink()
            
            try:
                downloaded.rename(new_name)
                downloaded = new_name
                print(f"‚úì ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô: {downloaded.name}")
            except Exception as e:
                print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: {e}")
                print(f"   ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°: {downloaded.name}")
            
            print(f"‚úì ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {downloaded.name}")
            return downloaded
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF: {e}")
        save_debug_screenshot(driver, "pdf_download_error", out_dir)
        raise
    
def preprocess_image_for_ocr(image):
    """‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥ OCR"""
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô numpy array
    img_array = np.array(image)
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô grayscale
    if len(img_array.shape) == 3:
        gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
    else:
        gray = img_array
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏°‡∏ä‡∏±‡∏î
    gray = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]
    
    # ‡∏•‡∏î noise
    gray = cv2.medianBlur(gray, 3)
    
    return Image.fromarray(gray)


def extract_text_from_pdf(pdf_path: Path, out_dir: Path) -> pd.DataFrame:
    """‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ OCR ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô DataFrame"""
    print(f"üìñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥ OCR ‡πÑ‡∏ü‡∏•‡πå: {pdf_path.name}")
    
    try:
        # ‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        print("   üñºÔ∏è  ‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û...")
        images = convert_from_path(pdf_path, dpi=300)
        print(f"   ‚úì ‡∏û‡∏ö {len(images)} ‡∏´‡∏ô‡πâ‡∏≤")
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤
        all_data = []
        
        for page_num, image in enumerate(images, 1):
            print(f"   üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á OCR ‡∏´‡∏ô‡πâ‡∏≤ {page_num}/{len(images)}...")
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô OCR
            processed_img = preprocess_image_for_ocr(image)
            
            # ‡∏ó‡∏≥ OCR (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)
            try:
                text = pytesseract.image_to_string(
                    processed_img, 
                    lang='tha+eng',  # ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ + ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
                    config='--psm 6'  # Assume uniform block of text
                )
            except Exception as e:
                print(f"   ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ OCR ‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢: {e}")
                print(f"   ‚ÑπÔ∏è  ‡∏•‡∏≠‡∏á OCR ‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß...")
                text = pytesseract.image_to_string(
                    processed_img, 
                    lang='eng',
                    config='--psm 6'
                )
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
            lines = [line.strip() for line in text.split('\n') if line.strip()]
            
            for line_num, line in enumerate(lines, 1):
                all_data.append({
                    '‡∏´‡∏ô‡πâ‡∏≤': page_num,
                    '‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î': line_num,
                    '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°': line
                })
            
            print(f"   ‚úì ‡∏´‡∏ô‡πâ‡∏≤ {page_num}: ‡∏û‡∏ö {len(lines)} ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame
        df = pd.DataFrame(all_data)
        print(f"‚úì OCR ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå: ‡∏£‡∏ß‡∏° {len(df)} ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î")
        
        return df
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ OCR: {e}")
        save_debug_screenshot(None, "ocr_error", out_dir)
        raise


def extract_structured_data(df: pd.DataFrame, juristic_id: str) -> pd.DataFrame:
    """‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å OCR results - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DBD"""
    print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç...")
    
    structured_data = []
    all_text = '\n'.join(df['‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°'].tolist())
    
    # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏≤ - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö PDF ‡∏à‡∏£‡∏¥‡∏á
    patterns = {
        '‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó': [
            r'‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó\s+([^\n]+?)\s+‡∏à‡∏≥‡∏Å‡∏±‡∏î',
            r'‡∏ä‡∏∑‡πà‡∏≠\s*[:Ôºö]\s*([^\n]+)',
        ],
        '‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•': [
            r'‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•\s*[:Ôºö]\s*([0-9]+)',
            r'‡πÄ‡∏•‡∏Ç.*?‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•.*?[:Ôºö]\s*([0-9]+)',
        ],
        '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•': [
            r'‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•\s*[:Ôºö]\s*([^\n]+)',
        ],
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏à‡∏±‡∏î‡∏ï‡∏±‡πâ‡∏á': [
            r'‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏à‡∏±‡∏î‡∏ï‡∏±‡πâ‡∏á\s*[:Ôºö]\s*([0-9/]+)',
            r'‡∏ß‡∏±‡∏ô‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô.*?[:Ôºö]\s*([0-9/]+)',
        ],
        '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•': [
            r'‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•\s*[:Ôºö]\s*([^\n]+)',
        ],
        '‡∏ó‡∏∏‡∏ô‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô': [
            r'‡∏ó‡∏∏‡∏ô‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô.*?[:Ôºö]\s*([0-9,\.]+)',
        ],
        '‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á': [
            r'‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á\s*[:Ôºö]\s*([^\n]+(?:\n(?![^\n]*[:Ôºö])[^\n]+)*)',
        ],
        '‡∏´‡∏°‡∏ß‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ï‡∏≠‡∏ô‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô': [
            r'‡∏´‡∏°‡∏ß‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ï‡∏≠‡∏ô‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô\s*[:Ôºö]\s*([^\n]+)',
        ],
        '‡∏´‡∏°‡∏ß‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏à‡∏≤‡∏Å‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô': [
            r'‡∏´‡∏°‡∏ß‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à\s*\(‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î\)\s*[:Ôºö]\s*([^\n]+)',
        ],
        '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏ï‡∏≠‡∏ô‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô': [
            r'‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏ï‡∏≠‡∏ô‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô\s*[:Ôºö]\s*([^\n]+)',
        ],
        '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏à‡∏≤‡∏Å‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô': [
            r'‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå\s*\(‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î\)\s*[:Ôºö]\s*([^\n]+)',
        ],
        '‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô': [
            r'‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô\s*[:Ôºö]\s*([^\n]+)',
        ],
    }
    
    # ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° pattern
    for field_name, pattern_list in patterns.items():
        for pattern in pattern_list:
            match = re.search(pattern, all_text, re.IGNORECASE | re.MULTILINE)
            if match:
                value = match.group(1).strip()
                # ‡∏ï‡∏±‡∏î whitespace ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤
                value = re.sub(r'\s+', ' ', value)
                
                structured_data.append({
                    'juristic_id': juristic_id,
                    '‡∏ü‡∏¥‡∏•‡∏î‡πå': field_name,
                    '‡∏Ñ‡πà‡∏≤': value,
                })
                break  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏≠‡∏á pattern ‡∏≠‡∏∑‡πà‡∏ô
    
    # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£
    print("   üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£...")
    director_match = re.search(r'‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£\s*[:Ôºö]\s*(.*?)(?=‡∏Ñ‡∏ì‡∏∞‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô|‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏ó‡∏£‡∏≤‡∏ö|$)', 
                               all_text, re.DOTALL)
    if director_match:
        directors_text = director_match.group(1)
        # ‡πÅ‡∏¢‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà.‡∏ä‡∏∑‡πà‡∏≠)
        directors = re.findall(r'\d+\.\s*([^\n]+)', directors_text)
        if directors:
            directors_list = '\n'.join([f"{i+1}. {d.strip()}" for i, d in enumerate(directors)])
            structured_data.append({
                'juristic_id': juristic_id,
                '‡∏ü‡∏¥‡∏•‡∏î‡πå': '‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£',
                '‡∏Ñ‡πà‡∏≤': directors_list,
            })
            print(f"   ‚úì ‡∏û‡∏ö‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£ {len(directors)} ‡∏Ñ‡∏ô")
    
    # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ì‡∏∞‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô
    signing_match = re.search(r'‡∏Ñ‡∏ì‡∏∞‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô\s*[:Ôºö]\s*(.*?)(?=‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô|‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏ó‡∏£‡∏≤‡∏ö|$)', 
                              all_text, re.DOTALL)
    if signing_match:
        signing_text = signing_match.group(1).strip()
        signing_text = re.sub(r'\s+', ' ', signing_text)
        structured_data.append({
            'juristic_id': juristic_id,
            '‡∏ü‡∏¥‡∏•‡∏î‡πå': '‡∏Ñ‡∏ì‡∏∞‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô',
            '‡∏Ñ‡πà‡∏≤': signing_text,
        })
    
    if structured_data:
        result_df = pd.DataFrame(structured_data)
        print(f"‚úì ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç {len(result_df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö
        field_order = [
            '‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', '‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•', '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•', 
            '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏à‡∏±‡∏î‡∏ï‡∏±‡πâ‡∏á', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•', '‡∏ó‡∏∏‡∏ô‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô',
            '‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á', '‡∏´‡∏°‡∏ß‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ï‡∏≠‡∏ô‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô', '‡∏´‡∏°‡∏ß‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏à‡∏≤‡∏Å‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô',
            '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏ï‡∏≠‡∏ô‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô', '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏à‡∏≤‡∏Å‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô',
            '‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô', '‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£', '‡∏Ñ‡∏ì‡∏∞‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô'
        ]
        result_df['‡∏ü‡∏¥‡∏•‡∏î‡πå'] = pd.Categorical(result_df['‡∏ü‡∏¥‡∏•‡∏î‡πå'], categories=field_order, ordered=True)
        result_df = result_df.sort_values('‡∏ü‡∏¥‡∏•‡∏î‡πå').reset_index(drop=True)
        
        return result_df
    else:
        print("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö - ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏ó‡∏ô")
        df['juristic_id'] = juristic_id
        df['‡∏ü‡∏¥‡∏•‡∏î‡πå'] = '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'
        return df[['juristic_id', '‡∏´‡∏ô‡πâ‡∏≤', '‡∏ü‡∏¥‡∏•‡∏î‡πå', '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°']]


def ocr_pdf_to_excel(pdf_path: Path, juristic_id: str, out_dir: Path) -> Path:
    """‡∏ó‡∏≥ OCR ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô Excel"""
    print("="*60)
    print("üî§ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ OCR")
    print("="*60)
    
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Tesseract ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        try:
            pytesseract.get_tesseract_version()
        except Exception:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Tesseract OCR!")
            print("üì• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á:")
            print("   Windows: https://github.com/UB-Mannheim/tesseract/wiki")
            print("   Mac: brew install tesseract tesseract-lang")
            print("   Linux: sudo apt-get install tesseract-ocr tesseract-ocr-tha")
            raise RuntimeError("‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Tesseract OCR ‡∏Å‡πà‡∏≠‡∏ô")
        
        # OCR ‡πÑ‡∏ü‡∏•‡πå PDF
        ocr_df = extract_text_from_pdf(pdf_path, out_dir)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        raw_output = out_dir / f"{juristic_id}_company_info_ocr_raw.xlsx"
        ocr_df.to_excel(raw_output, index=False)
        print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {raw_output.name}")
        
        # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        structured_df = extract_structured_data(ocr_df, juristic_id)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
        structured_output = out_dir / f"{juristic_id}_company_info_ocr_structured.xlsx"
        structured_df.to_excel(structured_output, index=False)
        print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: {structured_output.name}")
        
        print("="*60)
        print("‚úÖ OCR ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
        print(f"üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {raw_output}")
        print(f"üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: {structured_output}")
        print("="*60)
        
        return structured_output
        
    except Exception as e:
        print(f"‚ùå OCR ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        raise

def switch_report(driver, name: str, out_dir: Path):
    """‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô"""
    print(f"üìÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: {name}")
    try_close_popups(driver, verbose=True)
    time.sleep(0.5)
    
    try:
        _ = WebDriverWait(driver, 3).until(
            EC.presence_of_element_located((By.XPATH, f"//*[self::a or self::button or self::div][contains(.,'{name}')]"))
        )
    except Exception:
        pass
    
    wait_click(driver, (By.XPATH, f"//*[self::a or self::button or self::div][contains(.,'{name}')]"), 20)
    WebDriverWait(driver, 30).until(EC.presence_of_element_located((By.XPATH, f"//*[contains(.,'{name}')]")))
    time.sleep(1.0)


def scrape_and_download_all(driver, download_dir: Path) -> Dict[str, Path]:
    """‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á 3 ‡πÅ‡∏ö‡∏ö"""
    files = {}

    print("üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏á‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ê‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô...")
    before = set(download_dir.glob("*"))
    click_print_excel(driver, download_dir)
    files["‡∏á‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ê‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô"] = wait_for_downloads(download_dir, before, timeout=120)
    print(f"‚úì ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {files['‡∏á‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ê‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô'].name}")

    print("üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏á‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô...")
    switch_report(driver, "‡∏á‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô", download_dir)
    before = set(download_dir.glob("*"))
    click_print_excel(driver, download_dir)
    files["‡∏á‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô"] = wait_for_downloads(download_dir, before, timeout=120)
    print(f"‚úì ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {files['‡∏á‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô'].name}")

    print("üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô...")
    switch_report(driver, "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô", download_dir)
    before = set(download_dir.glob("*"))
    click_print_excel(driver, download_dir)
    files["‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô"] = wait_for_downloads(download_dir, before, timeout=120)
    print(f"‚úì ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {files['‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô'].name}")

    return files


# ------------------------- Tidy & Merge ------------------------- #
def buddhist_to_gregorian(year):
    try:
        y = int(re.findall(r"\d{4}", str(year))[0])
        return y - 543 if y > 2400 else y
    except Exception:
        return None


def tidy_excel(path: Path, report_type: str, juristic_id: str) -> pd.DataFrame:
    df = pd.read_excel(path, sheet_name=0, header=0)
    df = df.dropna(how="all", axis=1).dropna(how="all", axis=0)

    year_cols = []
    for c in df.columns:
        if re.search(r"(25\d{2}|20\d{2})", str(c)):
            year_cols.append(c)
    if not year_cols:
        year_cols = [c for c in df.columns if re.search(r"\d{4}", str(c))]

    name_col = df.columns[0]
    long_df = df.melt(id_vars=[name_col], value_vars=year_cols, var_name="‡∏õ‡∏µ", value_name="‡∏Ñ‡πà‡∏≤")
    long_df.rename(columns={name_col: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"}, inplace=True)
    long_df["‡∏õ‡∏µ"] = long_df["‡∏õ‡∏µ"].apply(buddhist_to_gregorian)
    long_df["report_type"] = report_type
    long_df["juristic_id"] = juristic_id
    long_df = long_df.dropna(subset=["‡∏Ñ‡πà‡∏≤"]).reset_index(drop=True)
    return long_df


def merge_to_single_excel(download_map: Dict[str, Path], out_path: Path, juristic_id: str) -> pd.DataFrame:
    print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå...")
    frames = []
    for rep, p in download_map.items():
        frames.append(tidy_excel(Path(p), rep, juristic_id))
    merged = pd.concat(frames, ignore_index=True)

    def tag_cat(x: str) -> str:
        s = str(x)
        if re.search("‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå|‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô", s):
            return "‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå"
        if re.search("‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô|‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ñ‡∏∑‡∏≠‡∏´‡∏∏‡πâ‡∏ô", s):
            return "‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô/‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ñ‡∏∑‡∏≠‡∏´‡∏∏‡πâ‡∏ô"
        if re.search("‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ|‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢|‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô|‡∏Å‡∏≥‡πÑ‡∏£|‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô", s):
            return "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ/‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"
        return "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"

    merged["‡∏´‡∏°‡∏ß‡∏î"] = merged["‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"].apply(tag_cat)
    cols = ["juristic_id", "report_type", "‡∏õ‡∏µ", "‡∏´‡∏°‡∏ß‡∏î", "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", "‡∏Ñ‡πà‡∏≤"]
    merged = merged[cols].sort_values(["report_type", "‡∏õ‡∏µ", "‡∏´‡∏°‡∏ß‡∏î", "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"]).reset_index(drop=True)
    out_path.parent.mkdir(parents=True, exist_ok=True)
    merged.to_excel(out_path, index=False)
    print(f"‚úì ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {out_path}")
    return merged


# ------------------------- Main ------------------------- #
def main():
    parser = argparse.ArgumentParser(description="Scrape DBD Datawarehouse financials (improved version)")
    parser.add_argument("--juristic-id", required=True, help="‡πÄ‡∏•‡∏Ç‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• ‡πÄ‡∏ä‡πà‡∏ô 0105560001219")
    parser.add_argument("--out-dir", default="./downloads", help="‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå")
    parser.add_argument("--headless", action="store_true", help="‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÇ‡∏ä‡∏ß‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á")
    parser.add_argument("--skip-pdf", action="store_true", help="‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•")
    parser.add_argument("--skip-ocr", action="store_true", help="‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ OCR (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ Tesseract)")
    args = parser.parse_args()

    out_dir = Path(args.out_dir)
    out_dir.mkdir(parents=True, exist_ok=True)

    print("="*60)
    print("üöÄ DBD Financial Scraper (Improved Version)")
    print("="*60)

    driver = make_driver(out_dir, headless=args.headless)
    try:
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
        search_by_juristic_id(driver, args.juristic_id, out_dir)
        
        # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ skip)
        pdf_file = None
        if not args.skip_pdf:
            try:
                pdf_file = download_company_info_pdf(driver, args.juristic_id, out_dir)
                
                # ‡∏ó‡∏≥ OCR (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ skip)
                if pdf_file and not args.skip_ocr:
                    try:
                        ocr_result = ocr_pdf_to_excel(pdf_file, args.juristic_id, out_dir)
                    except Exception as e:
                        print(f"‚ö†Ô∏è  OCR ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
                        print("üí° ‡πÉ‡∏ä‡πâ --skip-ocr ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ")
                        
            except Exception as e:
                print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF: {e}")
                print("üìù ‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πà‡∏≠...")
        
        # ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏ö‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
        go_financial_tab(driver, out_dir)
        
        # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
        downloaded = scrape_and_download_all(driver, out_dir)

        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
        rename_map = {}
        for rep, p in downloaded.items():
            suffix = {
                "‡∏á‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ê‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô": "balance",
                "‡∏á‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô": "income",
                "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô": "ratios",
            }[rep]
            newp = out_dir / f"{args.juristic_id}_{suffix}.xlsx"
            try:
                Path(p).rename(newp)
                rename_map[rep] = newp
            except Exception:
                rename_map[rep] = Path(p)

        # ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
        merged_path = out_dir / f"{args.juristic_id}_dbd_merged.xlsx"
        merge_to_single_excel(rename_map, merged_path, args.juristic_id)
        
        print("="*60)
        print(f"‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
        if pdf_file:
            print(f"üìÑ ‡πÑ‡∏ü‡∏•‡πå PDF: {pdf_file}")
            if not args.skip_ocr:
                print(f"üî§ ‡πÑ‡∏ü‡∏•‡πå OCR: {args.juristic_id}_company_info_ocr_*.xlsx")
        print(f"üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏°: {merged_path}")
        print("="*60)
        
    except Exception as e:
        print("\n" + "="*60)
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        print("="*60)
        save_debug_screenshot(driver, "final_error", out_dir)
        raise
    finally:
        try:
            driver.quit()
        except Exception:
            pass


if __name__ == "__main__":
    main()